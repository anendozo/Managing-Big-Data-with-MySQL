#EXERCISE 1
SELECT EXTRACT(YEAR from saledate) AS year_num,
EXTRACT(MONTH from saledate) AS month_num, 
COUNT(DISTINCT saledate) AS num_dates
FROM trnsact
GROUP BY year_num, month_num
ORDER BY year_num, month_num;

#EXERCISE 2
SELECT sku, SUM(amt)as sales
FROM trnsact
WHERE EXTRACT(MONTH from saledate) IN (6,7,8) AND stype='P'
GROUP BY sku
ORDER BY sales DESC;

#OR
SELECT sku,
(SUM(CASE WHEN EXTRACT(MONTH from saledate)=6 THEN amt END) + 
SUM(CASE WHEN EXTRACT(MONTH from saledate)=7 THEN amt END) +
SUM(CASE WHEN EXTRACT(MONTH from saledate)=8 THEN amt END)) AS total_sales
FROM trnsact
WHERE stype='P'
GROUP BY sku
ORDER BY total_sales DESC
HAVING total_sales IS NOT NULL;

#EXERCISE 3
SELECT EXTRACT(MONTH from saledate) AS month_num,
EXTRACT(YEAR from saledate) AS year_num, store, COUNT(DISTINCT saledate) AS num_days
FROM trnsact
GROUP BY month_num,year_num,store
ORDER BY num_days;

#EXERCISE 4
SELECT COUNT(DISTINCT saledate)
FROM trnsact;
#stores with missing transactions
SELECT store, COUNT(DISTINCT saledate) AS num_transactions
FROM trnsact
GROUP BY store
ORDER BY num_transactions ASC;

#average daily revenue
SELECT store, EXTRACT(MONTH from saledate) AS month_num,
EXTRACT(YEAR from saledate) AS year_num,
(SUM(amt)/COUNT(DISTINCT saledate)) AS avg_daily_revenue, COUNT(DISTINCT saledate)
FROM trnsact 
WHERE stype='P' AND
(month_num <> 8 OR year_num <> 2005) 
GROUP BY store, month_num,year_num
HAVING COUNT(DISTINCT saledate)>=20
ORDER BY year_num, month_num;

#EXERCISE 5

SELECT store_cleaned.level_hs, SUM(store_cleaned.total)/ SUM(store_cleaned.num_date) AS avg_revenue
FROM (SELECT t.store, 
CASE WHEN s.msa_high BETWEEN 50 AND 60 THEN 'low' 
  WHEN s.msa_high BETWEEN 60.01 AND 70 THEN 'medium'
  WHEN s.msa_high >70 THEN 'high'
  END AS level_hs, SUM(t.amt) AS total, COUNT(DISTINCT saledate)AS num_date
FROM trnsact t JOIN store_msa s
ON t.store=s.store
WHERE stype='P' AND
(EXTRACT(MONTH from saledate) <> 8 OR EXTRACT(YEAR from saledate) <> 2005) 
GROUP BY t.store, level_hs
HAVING COUNT(DISTINCT t.saledate)>=20) AS store_cleaned
GROUP BY store_cleaned.level_hs

#EXERCISE 6
SELECT DISTINCT top3.sku, top3.city, top3.state
FROM (SELECT TOP 3 t.sku, s.city, s.state
     FROM trnsact t JOIN strinfo s 
     ON t.store=s.store 
     ORDER BY t.sprice DESC) top3

#average daily revenue of store with highest and lowest median msa_income
SELECT t.store,s.city,s.state,s.msa_income,(SUM(t.amt)/ COUNT(DISTINCT t.saledate)) AS avg_daily_rev
FROM trnsact t JOIN store_msa s
ON t.store=s.store
WHERE t.stype='P' AND
(EXTRACT(MONTH from saledate) <> 8 OR EXTRACT(YEAR from saledate) <> 2005) 
AND s.msa_income IN ((SELECT MAX(msa_income) FROM store_msa), (SELECT MIN(msa_income) FROM store_msa))
GROUP BY t.store, s.city,s.state, s.msa_income
HAVING COUNT(DISTINCT t.saledate)>=20

#EXERCISE 7
SELECT TOP 1 s.sku, s.brand, COUNT(t.saledate) AS num_trans, STDDEV_POP(t.sprice) AS std
FROM skuinfo s JOIN trnsact t
ON s.sku=t.sku
GROUP BY s.sku, s.brand
HAVING num_trans>100
ORDER BY std DESC;

#EXERCISE 8: There is an outlier (5005.00) in the sale price (typical 2.00 to 6.00)
#        of sku 3733090 that result to a largest std.
SELECT DISTINCT sku, sprice
FROM trnsact  
WHERE sku IN (SELECT sku_std.sku 
FROM (SELECT TOP 1 s.sku, s.brand, COUNT(t.saledate) AS num_trans, STDDEV_POP(t.sprice) AS std
FROM skuinfo s JOIN trnsact t
ON s.sku=t.sku
GROUP BY s.sku, s.brand
HAVING num_trans>100
ORDER BY std DESC) AS sku_std)

#EXERCISE 9
SELECT EXTRACT(MONTH from saledate) AS month_num,
EXTRACT(YEAR from saledate) AS year_num,
(SUM(amt)/COUNT(DISTINCT saledate)) AS avg_daily_revenue
FROM trnsact 
WHERE stype='P' AND
(month_num <> 8 OR year_num <> 2005) 
GROUP BY month_num,year_num
HAVING COUNT(DISTINCT saledate)>=20
ORDER BY avg_daily_revenue DESC;

#EXERCISE 10

SELECT skuinfo.dept, deptinfo.deptdesc, strinfo.city, strinfo.state, strinfo.store,
SUM(CASE WHEN EXTRACT(MONTH from t.saledate)=11 THEN t.amt END) AS Nov_amt,
COUNT(DISTINCT (CASE WHEN EXTRACT(MONTH from t.saledate)=11 THEN t.saledate END)) AS Nov_num_days,
SUM(CASE WHEN EXTRACT(MONTH from t.saledate)=12 THEN t.amt END) AS Dec_amt,
COUNT(DISTINCT (CASE WHEN EXTRACT(MONTH from t.saledate)=12 THEN t.saledate END)) AS Dec_num_days,
((Dec_amt/Dec_num_days - Nov_amt/Nov_num_days)/ (Nov_amt/Nov_num_days))*100 AS percent_increase
FROM skuinfo JOIN deptinfo ON skuinfo.dept=deptinfo.dept
JOIN trnsact t ON skuinfo.sku=t.sku
JOIN strinfo ON t.store=strinfo.store
WHERE t.stype='P' AND EXTRACT(MONTH from t.saledate) IN (11,12)
GROUP BY skuinfo.dept,deptinfo.deptdesc, strinfo.city, strinfo.state, strinfo.store
HAVING COUNT(DISTINCT t.saledate)>=20 
ORDER BY percent_increase DESC;

#EXERCISE 11
SELECT s.city, s.state,s.store,
SUM(CASE WHEN EXTRACT(MONTH from t.saledate)=8 THEN t.amt END) AS aug_rev,
COUNT(DISTINCT (CASE WHEN EXTRACT(MONTH from t.saledate)=8 THEN t.saledate END)) AS aug_num_days,
SUM(CASE WHEN EXTRACT(MONTH from t.saledate)=9 THEN t.amt END) AS sept_rev,
COUNT(DISTINCT (CASE WHEN EXTRACT(MONTH from t.saledate)=9 THEN t.saledate END)) AS sept_num_days,
(aug_rev/aug_num_days - sept_rev/sept_num_days) AS dec_avg_rev
FROM strinfo s JOIN trnsact t
ON s.store=t.store
WHERE t.stype='P' AND EXTRACT(MONTH from t.saledate) IN (8,9)
  AND (EXTRACT(MONTH from t.saledate)<>8 OR EXTRACT(YEAR from t.saledate) <>2005)
GROUP BY s.city, s.state,s.store
HAVING COUNT(DISTINCT t.saledate) >= 20
ORDER BY dec_avg_rev DESC;

#EXERCISE 12

#one year associated with each month
SELECT DISTINCT EXTRACT(MONTH from saledate) AS month_num, EXTRACT(YEAR from saledate) AS year_num
FROM trnsact
ORDER BY month_num

#MINIMUM TOTAL REVENUE

#month of minimum total revenue
SELECT store, EXTRACT(MONTH from saledate) AS month_num, SUM(amt) AS total_rev,
ROW_NUMBER() OVER (PARTITION BY store ORDER BY total_rev) AS row_num
FROM trnsact
WHERE stype='P' AND (EXTRACT(MONTH from saledate)<>8 OR 
EXTRACT(YEAR from saledate)<>2005)
QUALIFY row_num=1
GROUP BY store, month_num
HAVING COUNT(DISTINCT saledate)>=20
ORDER BY store

#count of stores with minimum total rev per month
SELECT store_month.month_num, COUNT(store_month.store) AS NumOfstores_MinTotalRev
FROM (SELECT store, EXTRACT(MONTH from saledate) AS month_num, SUM(amt) AS total_rev,
ROW_NUMBER() OVER (PARTITION BY store ORDER BY total_rev) AS row_num
FROM trnsact
WHERE stype='P' AND (EXTRACT(MONTH from saledate)<>8 OR 
EXTRACT(YEAR from saledate)<>2005)
QUALIFY row_num=1
GROUP BY store, month_num
HAVING COUNT(DISTINCT saledate)>=20) AS store_month
GROUP BY store_month.month_num
ORDER BY store_month.month_num;

#AVERAGE DAILY REV
#one year associated with each month
SELECT DISTINCT EXTRACT(MONTH from saledate) AS month_num, EXTRACT(YEAR from saledate) AS year_num
FROM trnsact
ORDER BY month_num
#month of minimum avg daily revenue
SELECT store, EXTRACT(MONTH from saledate) AS month_num, (SUM(amt)/COUNT(DISTINCT saledate)) AS AvgDaily_rev,
ROW_NUMBER() OVER (PARTITION BY store ORDER BY AvgDaily_rev) AS row_num
FROM trnsact
WHERE stype='P' AND (EXTRACT(MONTH from saledate)<>8 OR 
EXTRACT(YEAR from saledate)<>2005)
QUALIFY row_num=1
GROUP BY store, month_num
HAVING COUNT(DISTINCT saledate)>=20
ORDER BY store;

#count
SELECT store_month.month_num, COUNT(store_month.store) AS NumOfstores_MinAvgRev
FROM (SELECT store, EXTRACT(MONTH from saledate) AS month_num, (SUM(amt)/COUNT(DISTINCT saledate)) AS AvgDaily_rev,
ROW_NUMBER() OVER (PARTITION BY store ORDER BY AvgDaily_rev) AS row_num
FROM trnsact
WHERE stype='P' AND (EXTRACT(MONTH from saledate)<>8 OR 
EXTRACT(YEAR from saledate)<>2005)
QUALIFY row_num=1
GROUP BY store, month_num
HAVING COUNT(DISTINCT saledate)>=20) AS store_month
GROUP BY store_month.month_num
ORDER BY store_month.month_num;